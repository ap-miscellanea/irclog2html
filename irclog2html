#!/usr/bin/env perl
use 5.010;
use strict;
use utf8;

sub slurp {
	my ( $fn, $do_from_end ) = @_;
	my $binmode = ':encoding(UTF-8)';

	local $/;
	my $content;

	if ( '-' eq $fn ) {
		binmode STDIN, $binmode;
		$content = readline STDIN;
	}
	else {
		my $fh;
		open my $fh, "<$binmode", $fn or return;
		$content = readline $fh;
	}

	my $blocksize = 1 << 20;
	my $offset = $do_from_end ? -$blocksize : 0;
	my $step = $do_from_end ? -$blocksize : $blocksize;
	return sub {
		my $split = substr $content, $offset, $blocksize;
		my @line  = split /\n/, $split;
		if ( $do_from_end ) {
			$offset += $blocksize + length shift @line if $offset > 0;
		}
		else {
			$offset += $blocksize - length pop @line if $offset < length $split;
		}
		\@line;
	};
}

sub load_file {
	my ( $log, $fn, $do_backwards ) = @_;
	my $get_lines = slurp $fn, $do_backwards or return;
	my $lines = $get_lines->();
	if ( $do_backwards ) { while ( @$lines or @{ $lines = $get_lines->() } ) { $log->unshift( pop @$lines ) or last } }
	else                 { while ( @$lines or @{ $lines = $get_lines->() } ) { $log->push(  shift @$lines ) or last } }
	1;
}

if ( 'CGI/1.1' ne ( $ENV{'GATEWAY_INTERFACE'} // '' ) ) {
	eval 'use Getopt::Long 2.24, qw( :config bundling no_ignore_case no_auto_abbrev ); 1' or die $@;
	GetOptions(
		'from|f=s' => \my $opt_from,
		'to|t=s'   => \my $opt_to,
		'noconv|N' => \my $opt_noconvert,
	) or die "\n";

	my $log = ChatLog->new(
		show_from  => $opt_from,
		show_to    => $opt_to,
	);

	for my $fn ( @ARGV ? @ARGV : '-' ) {
		load_file $log, $fn, $opt_from
			or die "Couldn't open $fn to read: $!\n";
	}

	my $out = $opt_noconvert
		? $log->as_text
		: $log->as_html( title => "@ARGV" );

	print while defined( $_ = $out->chunk );
}
else {
	require Plack::Request;
	require Plack::Middleware::Deflater;
	require Plack::Handler::CGI;

	my $app = sub {
		my $env = shift;
		my $req = Plack::Request->new( $env );

		return [ 405, [], [] ] if 'GET' ne $req->method and 'HEAD' ne $req->method;

		my $fn = $ENV{'PATH_TRANSLATED'} // return [ 404, [], [] ];

		my $p = $req->query_parameters;

		my $log = ChatLog->new(
			show_from => $p->{'f'},
			show_to   => $p->{'t'},
		);

		load_file $log, $fn, $p->{'f'}
			or return [ ( $!{ENOENT} ? 404 : $!{EACCES} ? 403 : 500 ), [], [] ];

		my $mime = $p->{'src'}
			? 'text/plain; charset=utf-8'
			: 'text/html; charset=us-ascii';

		my $out = $p->{'src'}
			? $log->as_text
			: $log->as_html(
				title          => $fn,
				show_skip_link => not $p->{'noskip'},
			);

		return [ 200, [ 'Content-Type', $mime ], $out ];
	};

	$app = Plack::Middleware::Deflater->wrap( $app );

	Plack::Handler::CGI->new->run( $app );
}

#######################################################################

BEGIN {

package ChatLog;
use Object::Tiny::Lvalue qw( lines hashes num_words show_from show_to );

use Encode ();
use Digest::SHA1 ();

sub new {
	my $class = shift;
	return $class->SUPER::new( @_, lines => [], hashes => [] );
}

sub add_line {
	my $self = shift;
	my ( $line, $do_push ) = @_;

	return if not defined $line;

	my $hashes    = $self->hashes;
	my $to_hash   = $self->show_to;
	my $from_hash = $self->show_from;

	if ( @$hashes ) {
		return if $do_push
			? (   $to_hash and $hashes->[-1] eq   $to_hash )
			: ( $from_hash and $hashes->[0]  eq $from_hash );
	}

	chomp $line;

	my $hash = Digest::SHA1::sha1_base64 Encode::encode 'UTF-8', $line;
	$hash =~ tr{+/}{-_};

	my $lines    = $self->lines;
	my $cmp_hash = $do_push ? $from_hash : $to_hash;
	return '0E0' if $cmp_hash and $hash ne $cmp_hash and not @$lines;

	if ( $line =~ /\A.*?>/g ) {
		$self->num_words++ while $line =~ /[\pN\pL']+/g;
	}

	$do_push ? do {
		push    @$hashes, $hash;
		push    @$lines,  $line;
	} : do {
		unshift @$hashes, $hash;
		unshift @$lines,  $line;
	};
}

sub push {
	my $self = shift;
	$self->add_line( shift, 1 );
}

sub unshift {
	my $self = shift;
	$self->add_line( shift, 0 );
}

sub get_lines {
	my $self = shift;
	my ( $i, $len ) = @_;
	$i ||= 0;
	return grep { defined } @{ $self->lines }[ $i .. $i + $len ];
}

sub get_hashes {
	my $self = shift;
	my ( $i, $len ) = @_;
	$i ||= 0;
	return grep { defined } @{ $self->hashes }[ $i .. $i + $len ];
}

sub as_text { ChatLog::Convert::Text->new( log => @_ ) }
sub as_html { ChatLog::Convert::HTML->new( log => @_ ) }

package ChatLog::Convert;
use Object::Tiny::Lvalue qw( log line );

sub getline { my $self = shift; $self->chunk( @_ ) }
sub close {}

package ChatLog::Convert::Text;
use parent -norequire => 'ChatLog::Convert';

sub chunk {
	my $self = shift;
	my @line = $self->log->get_lines( $self->line, 100 );
	return if not @line;
	$self->line += @line;
	return Encode::encode 'UTF-8', ( join "\n", @line, '' ), Encode::FB_HTMLCREF;
}

package ChatLog::Convert::HTML;
use parent -norequire => 'ChatLog::Convert';
use Object::Tiny::Lvalue qw( show_skip_link title );

# regex by John Gruber
# http://daringfireball.net/2010/07/improved_regex_for_matching_urls
sub _url_rx () { qr{\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.|[a-z0-9.\-]+[.[a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\{\};:'".,<>?«»“”‘’]))}i }

my %ent = qw( < lt > gt & amp ' #39 " #34 );
sub _encode_entities { s!([<>&'"])!&$ent{$1};!g for my @c = @_; @c[ 0 .. $#c ] }

sub _linkify {
	my ( $url ) = @_;
	return '' if not defined $url;

	my @seg = map { _encode_entities $_ } map m!(.{1,50})!sg, split m{(?<=/)(?!/)}, $url;
	my $link  = join '', @seg;
	my $label = join '<wbr />', @seg; # deprecated :-( need a soft-hyphen w/o the hyphen...

	# FIXME referer hiding should probably be optional?
	return qq'<a href="$link" rel="noreferrer" tabindex="1">$label</a>';
}

sub chunk {
	my $self = shift;

	my $chunk;

	if ( not defined $self->line ) {
		$self->line = 0;

		my $title = $self->title;
		$title  =~ s/\.(?:irc)?log(?: |\z)//g if $title;
		$title  =~ s!(?: |\A)([^ ]*/)!!g if $title;
		$title .= ' ' if $title;
		$title .= '(' . @{ $self->log->lines }   . ' lines';
		$title .= ', ' .   $self->log->num_words . ' words' if $self->log->num_words;
		$title .= ')';

		$chunk = qq(
			<html>
			<head>
			<title>$title « irclog2html</title>
			<style type="text/css">
			body { margin: 0.5em 0 }
			a.f, a.p { text-decoration: none; padding: 0 0.35em }
			a.f { padding-left:  0.7em }
			a.p { padding-right: 0.7em }
			a.f:before { content: '\\21A7' }
			a.p:before { content: '#' }
			p {
				margin: 0;
				padding: 0.05em 0;
				vertical-align: top;
				line-height: 1.4;
			}
			.crud { display: table-cell; white-space: pre }
			.text { display: table-cell; white-space: pre-wrap }
			tt { font-size: 13px }
			</style>
			</head>
			<body>
		);

		$chunk =~ s!^\t+!!mg;
		$chunk =~ s!^\n+!!;
	}
	else {
		my ( $line, $next_line ) = $self->log->get_lines( $self->line, 2 );
		return if not defined $line;
		my ( $hash ) = $self->log->get_hashes( $self->line, 1 );

		my ( $nick, $text ) = split /(?<=>) /, $line, 2;

		$chunk  = sprintf '<p id="l%s">', $hash;
		$chunk .= '<tt class="crud">';
		$chunk .= sprintf '<a href="?f=%s" class="f" tabindex="9"></a>', $hash if $self->show_skip_link;
		$chunk .= sprintf '<a href="#l%s" class="p" tabindex="9"></a>', $hash;
		$chunk .= _encode_entities $nick;
		$chunk .= ' </tt>';

		if ( defined $text ) {
			my $url_rx = _url_rx;
			$text =~ s{\G(.*?)$url_rx?}{ _encode_entities($1) . _linkify($2) }eg;
			$chunk .= sprintf '<tt class="text">%s</tt>', $text;
		}

		$chunk .= "\n";

		$self->line++;
	}

	return Encode::encode 'us-ascii', $chunk, Encode::FB_HTMLCREF;
}

}
