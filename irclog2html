#!/usr/bin/env perl
use 5.010;
use strict;
use utf8;
use Encode;
use Digest::SHA1 qw( sha1_base64 );

use constant CGI_MODE => $0 =~ /\.cgi\z/;

my %ent = qw( < lt > gt & amp ' #39 " #34 );
sub encode_entities { s!([<>&'"])!&$ent{$1};!g for my @c = @_; @c[ 0 .. $#c ] }

sub cgi_exit {
	my ( $status, $body ) = @_;
	print "Status: $status\r\n";
	print "Content-Type: text/plain\r\n";
	print "\r\n$body";
	exit;
}

sub openf {
	my ( $fn ) = @_;
	my $binmode = ':encoding(UTF-8)';
	if ( '-' eq $fn ) { binmode STDIN, $binmode; return \*STDIN }
	open my $fh, "<$binmode", $fn
		or CGI_MODE
			? cgi_exit +( $!{EACCES} ? 403 : 500 ) x 2
			: die "Couldn't open $fn to read: $!\n";
	return $fh;
}

my ( @file, $opt_from );

if ( not CGI_MODE ) {
	eval 'use Getopt::Long 2.24, qw( :config bundling no_ignore_case no_auto_abbrev )';
	GetOptions( 'from|f=s' => \$opt_from ) or die "\n";
	@file = @ARGV ? @ARGV : '-';
}
else {
	@file = $ENV{'IRCLOG'} // $ENV{'REDIRECT_IRCLOG'} // cgi_exit 404, 'Empty.';
	my %h; push @{ $h{$$_[0]} }, $$_[1] for map [ split /=/, $_, 2 ], split /[&;]/, $ENV{'QUERY_STRING'};
	$opt_from = @{ $h{'f'} }[-1] if exists $h{'f'};
}

# regex by John Gruber
# http://daringfireball.net/2010/07/improved_regex_for_matching_urls
my $url_rx = qr{\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.|[a-z0-9.\-]+[.[a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\{\};:'".,<>?«»“”‘’]))}i;

my ( $title ) = @file == 1 ? $file[0] =~ /([^\/]+?)(?:\.(?:irc)?log)?\z/ : '';
my $body = '';
my $num_lines = 0;

for my $fn ( @file ) {
	my $fh = openf $fn;
	while ( <$fh> ) {
		chomp;

		my $line_id = sha1_base64 encode 'UTF-8', $_;
		next if $opt_from and $line_id ne $opt_from and not $num_lines;

		++$num_lines;
		my ( $nick, $line ) = split /(?<=>) /, $_, 2;

		$line =~ s{\G(.*?)$url_rx?}{
			encode_entities( $1 )
			. ( $2 ? sprintf '<a href="%s">%1$s</a>', encode_entities( $2 ) : '' )
		}eg;

		$body .=
			sprintf "<table><tr>%s</tr></table>\n",
			join "",
			map { sprintf "<td>%s</td>", $_ }
			( CGI_MODE ? sprintf( '<a href="?f=%s">&#8615;</a>', $line_id ) : () ),
			sprintf( '<a href="#l%s" id="l%s">%s</a>', $line_id, $line_id, encode_entities $nick ),
			$line;
	}
}

print "Content-Type: text/html; charset=us-ascii\r\n\r\n" if CGI_MODE;

my $colsel = CGI_MODE ? '+ td' : '';

print Encode::encode 'us-ascii', << "END_PAGE", Encode::FB_HTMLCREF;
<html>
<head>
<title>$title@{[ $title ? ' ' : '' ]}($num_lines lines) « irclog2html</title>
<style type="text/css">
@{[ CGI_MODE ? 'tr > td:first-child > a { text-decoration: none }' : '' ]}
tr > td:first-child $colsel > a { text-decoration: none; color: inherit }
td { font-family: monospace; font-size: 12px; vertical-align: top; white-space: nowrap }
td:first-child + td $colsel { padding-left: 0.25em; white-space: normal }
</style>
</head>
<body>
$body
</body>
</html>
END_PAGE
